//상속
//	- 다른 클래스의 기능을 사용하는것.
//	- 상속해주는 클래스 : parent(super)클래스
//	- 상속받는 클래스 : child(sub)클래스
//	- 특별한 제약 없이 super클래스의 기능을 쉽게 사용할 수 있다.
//	-장점 
//		: 기존 코드를 손대지 않고 기능을 확장할 수 있다.
//		: 기존 코드를 쉽게 재활용 할 수 있다.
//	-단점 
//		: 상속받을 기능을 취사선택 할 수 없다.(이기능은 상속받고 이기능은 안받을래 불가능)
//		: 무조건 전부상속 -> 상속 단계가 깊어질수록 코드가 무거워진다.(필요없는기능 다갖고있기때문)
//	-좀더 유지보수에 유연한 시스템을 개발 하려면 상속 대신 다른 방법을 사용하라.
//		: 의존 방식, 프록시 ...

package exam.oop2.step02;

public class CalculatorPro extends Calculator{
	
	// 새로 추가할 기능 ( 곱하기 )
	public void multiple(int value){
		result*=value;
	}
	
}
